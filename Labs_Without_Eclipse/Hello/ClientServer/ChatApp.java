import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

// This base class has been initially generated by ChatGPT
public class ChatApp extends JFrame implements ActionListener {
    private ColoredTextPane chatArea;
    private JTextField inputField;
    private JButton sendButton;
    private String user;
    private Server communicationWithServer;

    public ChatApp(String user) throws RemoteException, NotBoundException {
        this.user = user;
        Registry registry = LocateRegistry.getRegistry("localhost"); // get the registry of the host given in argument
		this.communicationWithServer = (Server) registry.lookup("RunningServerPT1");
        setTitle("Chat v0.1 - "+user);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        int width = 700, height = 800;
        Dimension thisDim = new Dimension(width, height);
        this.setPreferredSize(thisDim);
        this.setMinimumSize(thisDim);

        chatArea = new ColoredTextPane(new Dimension(width-100, height-100));
        JScrollPane chatScrollPane = new JScrollPane(chatArea);

        inputField = new JTextField(50);
        sendButton = new JButton("Send");
        sendButton.addActionListener(this);

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
        inputPanel.add(inputField);
        inputPanel.add(sendButton);

        Container contentPane = getContentPane();
        contentPane.add(chatScrollPane, BorderLayout.CENTER);
        contentPane.add(inputPanel, BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String inputText = inputField.getText().trim();
        if (inputText.length() > 0) {
            try {
                communicationWithServer.message(user, inputText);
            } catch (RemoteException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }
            inputField.setText("");
        }
    }

    public void addMessage(String user,String s){
        if (this.user.equals(user))
            chatArea.normalMessage("You: " + s);
        else {
            chatArea.normalMessage(user+": " + s);
        }
    }
    public void addMessage(String s){
        chatArea.normalMessage(s);
    }

    public void run() throws RemoteException{
        this.setVisible(true);
    }

    public void askForConnection(){
        ConnexionClient cc = new ConnexionClient(this);
        System.out.println("test");
    }

    public void connect(String user, String pass){
        //
    }

    public String toString(){
        return "ChatApp v0.1";
    }
}